{"version":3,"file":"static/js/271.6477fb97.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Chat/ChatPage.module.css?bcb2","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"ChatPage_message__+z4hp\",\"message_photo\":\"ChatPage_message_photo__AbpK1\",\"message_userName\":\"ChatPage_message_userName__-cIIL\",\"message_text\":\"ChatPage_message_text__T7KZl\"};","import React, { useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../../redux/chat-reducer.ts\";\r\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store.ts\";\r\nimport { Navigate, NavLink } from \"react-router-dom\";\r\nimport { getIsAuthSelector } from '../../redux/auth-selectors.ts';\r\nimport styles from './ChatPage.module.css'\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport { Button, Input } from 'antd'\r\nimport Preloader from \"../common/Preloader/Preloader.tsx\";\r\nconst { TextArea } = Input;\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    const isAuth = useSelector(getIsAuthSelector)\r\n    if (!isAuth) { return <Navigate to={'/login'} replace={true} /> }\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status !== 'ready' && <Preloader />}\r\n        {status === 'error' && <div>Some error occured. Refresh the page</div>}\r\n        <>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null) //Хук useRef позволяет сохранить некоторый объект, который можно можно изменять и который хранится в течение всей жизни компонента.\r\n    const [isAutoScroll, setAutoScroll] = useState(false)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => { //нужно чтобы вниз перелистывалось только если мы внизу (100рх от низа или меньше)\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 100) //100px \r\n        {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        } else isAutoScroll && setAutoScroll(false)\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScroll)\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }, [messages])\r\n    return <div style={{ height: '75vh', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => { //React.memo используем потому что эта компонента часто перерисовывается\r\n    return <div className={styles.message}>\r\n        <div className={styles.message_photo}>\r\n            <NavLink to={'/profile/' + message.userId}>\r\n                {message.photo\r\n                    ? <img style={{ width: '50px' }} src={message.photo} alt={\"Юзер\"} />\r\n                    : <img style={{ width: '50px' }} src={userPhoto} alt={\"Юзер\"} />\r\n                }\r\n            </NavLink>\r\n        </div>\r\n        <div className={styles.message_userName}>\r\n            <NavLink to={'/profile/' + message.userId}>\r\n                {message.userName}\r\n            </NavLink>\r\n        </div>\r\n        <div className={styles.message_text}>{message.message}</div>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return //прерывание функции\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('') //зануляем поле ввода\r\n    }\r\n    return <div>\r\n        <div><TextArea maxLength={100} placeholder=\"100 символов - максимум\" autoSize style={{ margin: '8px 0 8px 0' }} name=\"\" id=\"\" onChange={(e) => setMessage(e.currentTarget.value)} value={message}></TextArea></div>\r\n        <div><Button disabled={status !== 'ready'} onClick={sendMessageHandler}>Отправить</Button></div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage\r\n\r\n//!Сокет периодически сам закрывается. Вероятно, проблема на сервере, либо провайдер отсоединяет"],"names":["TextArea","Input","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","Preloader","_Fragment","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","isAutoScroll","setAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","_ref","className","styles","NavLink","to","userId","photo","width","src","alt","userPhoto","userName","setMessage","maxLength","placeholder","autoSize","margin","name","onChange","value","Button","disabled","onClick","sendMessageHandler","sendMessage","ChatPage","getIsAuthSelector","Navigate","replace"],"sourceRoot":""}